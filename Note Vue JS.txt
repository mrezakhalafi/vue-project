===================================================================================================================================================

Note Vue JS
M Reza Khalafi Notes 
07/04/2023

===================================================================================================================================================

STRUCTURE

1) node_modules = Berisi file NPM, gausah dimodifikasi
2) public = Berisi file yang terbuka public seperti assets/ js/ images/ untuk dimasukan ke hosting folder public_html
3) src = Berisi file core dari vue JS

===================================================================================================================================================

<?= 1. Instance Object Vue ?>

    Buat <div id="app> Isi HTML </div>
    Dan deklarasi pada script 
    const vm = new Vue({
        el: '#app', = Div pembungkus
        data: {
            name: 'Doremi Fasilasido', = Bisa ditaruh sebagai external variabel
            message: "Hello World!"
        }
    })

<?= 2. Mengakses Object Vue ?>

    Buka console.log dan ketikan vm, vm.$data 
    Bahkan bisa assign variabel dengan mengetikan vm.$data.name = "Nama Baru"
    Juga vm.$el.innerHTML = "<h1>Hello World</h1>" = Akan mereplace semua HTML

<?= 3. Interpolation / Template Syntak ?>

    {{ name }} = Otomatis berubah ketika kita ubah dari vm.$data.name
    <h1 v-once> {{ name }} </h1> = Data tidak bisa diubah

    Bisa juga operator JS biasa seperti {{ 1+1 }} dan {{ "Hello" + name.toUpperCase() }} dan if ternary

<?= 4. Method ?>

    const vm = new Vue({
        el: '#app',
        data: {
            name: 'Doremi Fasilasido',
            message: "Hello World!"
        },
        methods: {
            getName: function(){
                return "Hello " + this.name; = Wajib dengan this
            },
            ubahNama: function(namaBaru){
                this.name = namaBaru; = Dengan parameter, bisa langsung dipanggil di console.log = vm.ubahNama("Reza")
                return this.getName(); = Bisa juga memanggil fungsi diri sendiri
            }
        }
    });
    Panggil di HTML dengan {{ getName() }}

<?= 5. Computed Property ?>

    Property yang dicetak pada HTML {{ namaLengkap }} padahal isinya adalah sebuah fungsi JS
        const vm = new Vue({
                namaLengkap: function(){
                    return this.namaDepan + this.namaBelakang;
                }
            }
        });
    Menggantikan langsung mencetak {{ namaDepan + namaBelakang }}

    Atau mengubah 
        <h1>Bilangan ini adalah : {{ bilangan %2 == 0 ? 'Ganjil' : 'Genap' }}</h1>
    Menjadi 
        <h1>Bilangan ini adalah : {{ infoBilangan }}</h1>
    Jauh lebih simpel, karena operasi JS ditaruh pada computed Property 
        infoBilangan: function(){
            return this.bilangan %2 == 0 ? 'Genap' : 'Ganjil';
        }

<?= 6. Directive Binding ?>

    Directive ditempelkan pada HTML 
        <h1 v-once> = Data tidak bisa diubah
        <h1 v-text="name"></h1> = Mencetak string dari data: ("Reza")
        <h1 v-html="link"></h1> = Mencetak bentuk HTML dari data: ("<a href>")
    Dan bisa menggantikan {{ name }} seperti <h1 v-text="name"></h1>

    Bisa juga ditambahkan expresi dari JS biasa, seperti
    v-text="bilangan * 5" atau v-text="bilangan.toUpperCase()"

    Khusus untuk attribut seperti gambar yang di declare pada data:, tidak bisa langsung src="{{ gambar }}"
    Tapi harus seperti ini
    <img v-bind:src="gambar">

    v-bind bisa juga disingkat menjadi :src

<?= 7. Event ?>

    Gunakan v-on:click="" untuk memanggil fungsi JS, bisa juga dengan @click="" ( @ hanya untuk v:on )
    Isinya bisa langsung seperti v-on:click="bilangan++" atau deklarasi pada method 
        handleClick: function(){
            return this.bilangan++;
        }
    Dan panggil dengan v-on:click="handleClick" = Bisa tanpa ()

<?= 8. Class Binding ?>

    <button v-bind:class="{ active: menu === 'home' }" @click="menu = 'home'">Home</button>
    <button v-bind:class="{ active: menu === 'about' }" @click="menu = 'about'">About</button>
    <button v-bind:class="{ active: menu === 'blog' }" @click="menu = 'blog'">Blog</button>
    Dengan pembacaan, cetak class "Active" jika memenuhi kondisi attribut menu pada data adalah "Home" { Class : Kondisi }

<?= 9. V-Model / Two Ways Data Binding ?>

    Pakai <input v-model="name"> pada tag HTML agar 
        - Input menampilkan attribut dari data:
        - Ketika input berubah maka live attribut data juga berubah (Tambahkan cetak jika mau melihat)
    Termasuk untuk checkbox :
        <label><input type="checkbox" value="React" v-model="kelas"> React</label>
        <label><input type="checkbox" value="Vue JS" v-model="kelas"> Vue JS</label>
        <label><input type="checkbox" value="Angular" v-model="kelas"> Angular</label>
    Maka attribut "kelas" pada data: yang di declare sebagai array [], akan live menambah dan mengurang

    Khusus untuk checkbox tambahkan <p style="white-space: pre-line"> {{ message }}</p>

<?= 10. V-For ?>

    Deklarasi array pada data:
     data: {
            kelas: ['Golang','PHP','Phyton']
        }
    Lalu bisa di loop dengan 
        <li v-for="item of kelas" v-text="item"></li>
        <li v-for="item in kelas">{{ item }}</li>
    Mau pake of / in atau {{ }} / v-text juga bisa 

    Untuk index bisa ditambahkan pada 
       v-for="(item,index) of kelas" maka bisa dicetak {{ index }}

    Atau untuk multiple object bisa dengan 
        <li v-for="(value,index) in object">
            {{ index+1 }} . {{ value.name }} : {{ value.study }}
        </li>

    Atau untuk single object ingin loop pair key - value bisa dengan 
        <li v-for="(value, name, index) in singleObject">
            {{ index+1 }} . {{ name }} {{ value }}
        </li>

<?= 11. Function in For ?>    

    <li v-for="num in caribilangangenap(numbers)">{{ num }}</li>
    Maka sebelum numbers di cetak per loop nya akan menjalankan fungsi caribilangangenap()

    caribilangangenap: function(data){
        return data.filter(angka => {
            return angka %2 == 0;
        })
    }
    Filter seperti JS native seperti biasa

<?= 12. V-If & V-Else ?>

    Mencetak HTML di bawahnya jika kondisi terpenuhi, misal :
        <ul v-if="kelas.length > 1">
            <li v-for="(item,index) of kelas">{{ index+1 }} - {{ item }}</li>
        </ul>
    Jika data array pada kelas ada isinya maka loop li
    Tambahkan else tepat di bawah div if (Tidak perlu kondisi apapun)
        <li v-else>Data tidak ditemukan</li>

    Kerennya lagi ini semua terhubung, jadi kalo tidak ada data masuk ke else, dan ketika checkbox tambah data otomatis masuk ke if
    Jauh lebih baik kalo if ditaruh pada tag <template></template

<?= 13. V-Show ?>

    Mirip dengan V-If, hanya mencetak div jika kondisi terpenuhi 
    Bedanya elemen tidak dihilangkan, hanya ditambah display:none, dan tidak ada v-else nya 
        <ul v-show="kelas.length">

<?= 14. Key ?>

    Rekomendasi untuk memberikan pembeda dari setiap element HTML, misalnya sesama input 
        <input type="text" name="email" key="username-input">
        <input type="password" name="password" key="password-input">
    Agar terjadi perenderan ulang dari awal

<?= 15. Event Handler ?>

    Taruh pada parameter kedua pada sebuah function di HTML 
        @click="switchMenu('home', $event)"
    Lalu tangkap pada function seperti
        switchMenu: function(menuBaru, event){
            event.preventDefault();
            this.menu = menuBaru;
        }
    event digunakan selayaknya JS biasa, ada .stop .capture .self dll

    Untuk .preventDefault bisa langsung pada directive seperti v-on:click.prevent="switchMenu('home')"

<?= 16. Key Modifier ?>

    <input v-on:keyup.enter="submit(event)">
    Ketika input keyup dan tombolnya adalah enter maka jalankan fungsi JS 
    submit(event){
        let text = event.target.value; = Mengambil value JS Native
        this.kelas.push(text); = Setelah enter, maka array data: kelas bertambah
        event.target.value = ""; = Mengosongkan input 
    }

    Untuk yang lebih keren bisa gunakan v-model="kelasBaru" pada input, deklarasi kelasBaru pada data: dan ubah menjadi seperti ini
    submit(){
        this.kelas.push(this.kelasBaru);
        this.kelasBaru = "";
    }

<?= 17. Component ?>

    Deklarasi suatu element untuk dipanggil berkali2 nantinya, tapi tidak memiliki data yang sama
    Tulis pada <script> 
            Vue.component('footer-component',{
                template: `
                <footer id="footer">
                    <p>Copyright 2023</p>
                </footer>`
            }
    Dengan 2 parameter, 1 = Nama component, 2 = Pair key, untuk template = Isi dari HTML nya 

    Lalu panggil pada HTML dengan 
        <footer-component></footer-component> = (Nama harus huruf kecil, dan dipisah -, hindari conflict dengan HTML asli)

    Inget, deklarasi component harus di atas dari vm = new Vue()

<?= 18. Data Pada Component ?>

    Vue.component('header-component',{
        template: `    
        <header id="header">
            <img src="image/logo.png" width="80">
            <p><h1 v-text="name"></h1></p>
            <p v-text="pesan">{{ pesan }}</p>
        </header>`,
        data: function(){
            return{
                pesan: "Hello Component"
            }
        }
    });
    Selain template, bisa juga masukan data dengan bentukan function (Dokumentasi) dan mereturn sebuah data yang bisa dipakai pada template

<?= 19. Props ?>

    Taruh data pada HTML
        <header-component nama="Vue JS New" images="../Latihan 1/image/logo.png"></header-component>
    Lalu tangkap pada Vue Component 
          Vue.component('header-component',{
            props: ['nama','images'], = Tangkap Props
            template: `    
            <header id="header">
                <img :src="images" width="80">
                <p><h1 v-text="name"></h1></p>
                <p>Hello {{ nama }}</p> = Maka Props Bisa Digunakan
            </header>`,
        });
    Jika deklarasi HTML berkali2 maka bisa menampilkan hasil yang berbeda2 sesuai props data 

<?= 20. Melempar Data dari Component Parent ke Component Children ?>

    Jika ingin data mengambil dari parent, tidak tiap component declare data maka bisa di transfer dengan 
        <class-component :items="kelas" :input="kelasBaru"></class-component>
    Dengan pembacaan v-bind:items / :items = kelas, items adalah nama props baru dan kelas adalah data pada parent component
    Maka pada JS nya 
         Vue.component('class-component',{
            props: ['items','input'], = Kedua props ini mempunyai nama baru yang di declare pada HTML
            template: `
            <main>
                <h3>Tambah Kelas.</h3>
                <input v-on:keyup.enter="submit()" v-model="input"> = = kelasBaru menjadi input (Mengikuti nama baru)
                <hr>
                <h3>Daftar Kelas ({{ items.length }})</h3> = kelas.length menjadi items.length (Mengikuti nama baru)
                <template v-show="items.length">
                    <ul>
                        <li v-for="(item,index) of items">{{ index+1 }} - {{ item }}</li>
                    </ul>
                    <li v-else>Data tidak ditemukan</li>
                </template>
            </main>`,

<?= 21. Local Component ?>

    Deklarasi sebelum vm = new Vue()
        const Home = {
            template: `<div>Home</div>`
        } = Variabel bebas 
    Maka pada VM bisa di daftarkan 
         const vm = new Vue({
            el: '#app',
            components: {
                'home' : Home = 'home' bebas, Home adalah nama const di atas
            },
        ])
    Kemudian pada HTML bisa dipanggil dengan 
        <home></home>

<?= 22. Emit Custom Events ?>

    Parent akan mendengarkan perubahan yang dilakukan oleh childrennya (Karena data ada di parent, butuh izin $emit)
    Pada element children buat $emit dengan nama parameter pertama bebas
        <a href="" v-on:click.prevent="$emit('hapuskelas', index)">Hapus</a>
    Lalu nama parameter tersebut akan di declare pada HTML 
        <class-component :items="kelas" :input="kelasBaru" v-on:hapuskelas="hapuskelas"></class-component>
    Dengan v-onhapuskelas = nama emit, dan = "hapuskelas" adalah nama fungsi baru 
    Buatlah nama fungsi baru tersebut pada parent 
        const vm = new Vue({
            el: '#app',
            methods: {
            hapuskelas: function(index){
                this.kelas.splice(index, 1);
            }
        });

<?= 23. Slot ?>

    Mengambil isi dari sebuah component HTML misal :
        <header-component>Ambil Saya</header-component>
    Ambil dengan 
         Vue.component('footer-component',{
            template: `
            <footer id="footer">
                <slot></slot>
            </footer>`
        })

<?= 24. Router ?>

    Ambil dari CDN 
        <script src="https://cdnjs.cloudflare.com/ajax/libs/vue-router/2.8.1/vue-router.js"></script>
    Buat component 
        const Home = {
            template: `<div>Home</div>`
        }
    Buat array routes 
        const routes = [
            {path: '/' , component: Home},
            {path: '/about' , component: About},
            {path: '/kelas' , component: Kelas}
        ]
    Deklarasi router berisi routes 
        const router = new VueRouter({
            routes
        });
    Taruh pada vm = new Vue()
        const vm = new Vue({
            el: '#app',
            router = Nama harus router (Dokumentasi)
        })
    Buat navbar perpindahan nenggunakan <router-link
        <nav>
            <router-link to="/">Home</router-link>
            <router-link to="/About">About</router-link>
            <router-link to="/Kelas">Kelas</router-link>
        </nav>
    Taruh view di tempat ingin berganti, dengan melampirkan semua directive 
        <router-view :items="kelas" v-on:hapuskelas="hapuskelas" v-on:inputkelas="inputkelas"></router-view>
    Maka di tempat <router-view akan berubah ubah sesuai path dari /Home yang menampilkan template dari const Home

<?= 25. Router History Mode ?>

    Secara default router menggunakan history sehingga ada # pada URL 
    Untuk mengubahnya tambahkan
        const router = new VueRouter({
            mode: 'history',
            routes
        });
    Dengan catatan, aplikasi harus berjalan di web server, jika tidak maka akan error URL = C:// (Not Found)
    Untuk menjalankan PHP local server, buka terminal dan masuk ke CD aplikasi dan ketikan 
        php -S localhost:3000

<?= 26. Generate Random ID ?>

    Dari github, pakai CDN dengan 
        <script type="module">
            import { v4 as uuidv4 } from 'https://jspm.dev/uuid';
        </script>
    Dan panggil variabelnya dengan 
        uuidv4(); = '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'

<?= 27. Preview & Upload Image ?>

    Buat IMG
        <img :src="imagepreview" v-if="imagepreview">
    Buat Input
        <input type="file" v-on:change="upload">
    Deklarasi data pada component
         data: function(){
            return{
                imagepreview: ''
            }
    Deklarasi function pada component
        upload: function(event){
            let imagename = event.target.files[0].name;
            this.kelas.gambar = imagename;
            this.imagepreview = URL.createObjectURL(event.target.files[0]); 
        }

<?= 28. 404 / Not Found ?>

    const routes = [
        {path: '/' , component: Home},
        {path: '*' , component: NotFound}
    ];
    Jika ditemukan maka panggil Home, jika tidak * maka akan diarahkan ke component NotFound 
    const NotFound = {
        template: `<div>Halaman Tidak Ditemukan</div>`
    }

<?= 28. Ref & $Refs ?>

    Ini untuk case menghapus nama file input ketika sudah submit form, $refs (Bawaan Vue JS) untuk mengambil nama ref (Bawaan HTML) namenya 
    Beri label pada HTML 
        <input type="file" ref="gambar" v-on:change="upload">
    Tangkap pada JS 
        this.$refs.gambar.value = '';

<?= 29. Validation ?>

    Ada VueValidate, tapi untuk saat ini pakai cara manual

    Buat <div untuk errornya 
        <div class="error" v-if="error.judul">{{ error.judul }}</div>
    Deklrasi object error pada data: 
        data: function () {
          return {
            error: {
              judul: "",
              deskripsi: "",
            },
          };
        }
    Kemudian tambahkan pada function on Submit
        submitkelas: function () {
            this.error.judul = ""; = Untuk mengosongkan kembali setiap sebelum validasi
            this.error.deskripsi = "";

            if (this.kelas.judul == "") { = Mengisi ke data error
                this.error.judul = "Judul is required"; = Menampilkan pada HTML
            }
            if (this.kelas.deskripsi == "") {
                this.error.deskripsi = "Deskripsi is required";
            }

            if (this.kelas.judul && this.kelas.deskripsi) { = Jika keduanya terisi baru lanjut
                // Jalankan Fungsi Insert
            };
        };

<?= 30. Localstorage ?>

    Pada saat insert simpan pada localstorage 
        inputkelas: function (data) {
            this.kelas.push(data);
            localStorage.setItem("kelas", JSON.stringify(this.kelas));
        }
    Dan pada saat load ambil dari localstorage, kosongkan datanya 
        data: {
            kelas: []
        }
    Buat method created() yaitu fungsi yang dijalankan pertamakali saat new Vue() / component di inisiasi
        const vm = new Vue({
            el: "#app",
            created() {
                this.kelas = JSON.parse(localStorage.getItem("kelas")) || []; = Ambil dari localstorage atau jika tidak ada ambil array kosong
            }
         });

<?= 31.  ?>

===================================================================================================================================================
