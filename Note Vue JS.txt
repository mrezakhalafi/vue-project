===================================================================================================================================================

Note Vue JS
M Reza Khalafi Notes 
07/04/2023

===================================================================================================================================================

STRUCTURE

1) node_modules = Berisi file NPM, gausah dimodifikasi
2) public = Berisi file yang terbuka public seperti assets/ js/ images/ untuk dimasukan ke hosting folder public_html
3) src = Berisi file core dari vue JS

===================================================================================================================================================

<?= 1. Instance Object Vue ?>

    Buat <div id="app> Isi HTML </div>
    Dan deklarasi pada script 
    const vm = new Vue({
        el: '#app', = Div pembungkus
        data: {
            name: 'Doremi Fasilasido', = Bisa ditaruh sebagai external variabel
            message: "Hello World!"
        }
    })

<?= 2. Mengakses Object Vue ?>

    Buka console.log dan ketikan vm, vm.$data 
    Bahkan bisa assign variabel dengan mengetikan vm.$data.name = "Nama Baru"
    Juga vm.$el.innerHTML = "<h1>Hello World</h1>" = Akan mereplace semua HTML

<?= 3. Interpolation / Template Syntak ?>

    {{ name }} = Otomatis berubah ketika kita ubah dari vm.$data.name
    <h1 v-once> {{ name }} </h1> = Data tidak bisa diubah

    Bisa juga operator JS biasa seperti {{ 1+1 }} dan {{ "Hello" + name.toUpperCase() }} dan if ternary

<?= 4. Method ?>

    const vm = new Vue({
        el: '#app',
        data: {
            name: 'Doremi Fasilasido',
            message: "Hello World!"
        },
        methods: {
            getName: function(){
                return "Hello " + this.name; = Wajib dengan this
            },
            ubahNama: function(namaBaru){
                this.name = namaBaru; = Dengan parameter, bisa langsung dipanggil di console.log = vm.ubahNama("Reza")
                return this.getName(); = Bisa juga memanggil fungsi diri sendiri
            }
        }
    });
    Panggil di HTML dengan {{ getName() }}

<?= 5. Computed Property ?>

    Property yang dicetak pada HTML {{ namaLengkap }} padahal isinya adalah sebuah fungsi JS
        const vm = new Vue({
                namaLengkap: function(){
                    return this.namaDepan + this.namaBelakang;
                }
            }
        });
    Menggantikan langsung mencetak {{ namaDepan + namaBelakang }}

    Atau mengubah 
        <h1>Bilangan ini adalah : {{ bilangan %2 == 0 ? 'Ganjil' : 'Genap' }}</h1>
    Menjadi 
        <h1>Bilangan ini adalah : {{ infoBilangan }}</h1>
    Jauh lebih simpel, karena operasi JS ditaruh pada computed Property 
        infoBilangan: function(){
            return this.bilangan %2 == 0 ? 'Genap' : 'Ganjil';
        }

<?= 6. Directive Binding ?>

    Directive ditempelkan pada HTML 
        <h1 v-once> = Data tidak bisa diubah
        <h1 v-text="name"></h1> = Mencetak string dari data: ("Reza")
        <h1 v-html="link"></h1> = Mencetak bentuk HTML dari data: ("<a href>")
    Dan bisa menggantikan {{ name }} seperti <h1 v-text="name"></h1>

    Bisa juga ditambahkan expresi dari JS biasa, seperti
    v-text="bilangan * 5" atau v-text="bilangan.toUpperCase()"

    Khusus untuk attribut seperti gambar yang di declare pada data:, tidak bisa langsung src="{{ gambar }}"
    Tapi harus seperti ini
    <img v-bind:src="gambar">

<?= 7. Event ?>

    Gunakan v-on:click="" untuk memanggil fungsi JS, bisa juga dengan @click="" ( @ hanya untuk v:on )
    Isinya bisa langsung seperti v-on:click="bilangan++" atau deklarasi pada method 
        handleClick: function(){
            return this.bilangan++;
        }
    Dan panggil dengan v-on:click="handleClick" = Bisa tanpa ()

<?= 8. Class Binding ?>

    <button v-bind:class="{ active: menu === 'home' }" @click="menu = 'home'">Home</button>
    <button v-bind:class="{ active: menu === 'about' }" @click="menu = 'about'">About</button>
    <button v-bind:class="{ active: menu === 'blog' }" @click="menu = 'blog'">Blog</button>
    Dengan pembacaan, cetak class "Active" jika memenuhi kondisi attribut menu pada data adalah "Home" { Class : Kondisi }

<?= 9. V-Model / Two Ways Data Binding ?>

    Pakai <input v-model="name"> pada tag HTML agar 
        - Input menampilkan attribut dari data:
        - Ketika input berubah maka live attribut data juga berubah (Tambahkan cetak jika mau melihat)
    Termasuk untuk checkbox :
        <label><input type="checkbox" value="React" v-model="kelas"> React</label>
        <label><input type="checkbox" value="Vue JS" v-model="kelas"> Vue JS</label>
        <label><input type="checkbox" value="Angular" v-model="kelas"> Angular</label>
    Maka attribut "kelas" pada data: yang di declare sebagai array [], akan live menambah dan mengurang

<?= 10. V-For ?>

    Deklarasi array pada data:
     data: {
            kelas: ['Golang','PHP','Phyton']
        }
    Lalu bisa di loop dengan 
        <li v-for="item of kelas" v-text="item"></li>
        <li v-for="item in kelas">{{ item }}</li>
    Mau pake of / in atau {{ }} / v-text juga bisa 

    Untuk index bisa ditambahkan pada 
       v-for="(item,index) of kelas" maka bisa dicetak {{ index }}

<?= 11. Function in For ?>    

    <li v-for="num in caribilangangenap(numbers)">{{ num }}</li>
    Maka sebelum numbers di cetak per loop nya akan menjalankan fungsi caribilangangenap()

    caribilangangenap: function(data){
        return data.filter(angka => {
            return angka %2 == 0;
        })
    }
    Filter seperti JS native seperti biasa

<?= 12. V-If & V-Else ?>

    Mencetak HTML di bawahnya jika kondisi terpenuhi, misal :
        <ul v-if="kelas.length > 1">
            <li v-for="(item,index) of kelas">{{ index+1 }} - {{ item }}</li>
        </ul>
    Jika data array pada kelas ada isinya maka loop li
    Tambahkan else tepat di bawah div if (Tidak perlu kondisi apapun)
        <li v-else>Data tidak ditemukan</li>
        
    Kerennya lagi ini semua terhubung, jadi kalo tidak ada data masuk ke else, dan ketika checkbox tambah data otomatis masuk ke if
    Jauh lebih baik kalo if ditaruh pada tag <template></template

<?= 13. V-Show ?>

    Mirip dengan V-If, hanya mencetak div jika kondisi terpenuhi 
    Bedanya elemen tidak dihilangkan, hanya ditambah display:none, dan tidak ada v-else nya 
        <ul v-show="kelas.length">

<?= 14.  ?>

===================================================================================================================================================
